// Generated by CoffeeScript 1.3.3
/*
# File: local.coffee
# Author: Wu Yuntao
# Created on: 2013-10-04
#
# 实现本地 Emitter 的互通
*/

var DEventData, DEventEmitter, PingPong, main, messages, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require("../devent"), DEventData = _ref.DEventData, DEventEmitter = _ref.DEventEmitter;

messages = require("./messages");

PingPong = (function(_super) {

  __extends(PingPong, _super);

  function PingPong() {
    var _this = this;
    PingPong.__super__.constructor.apply(this, arguments);
    this.on("ping", function(source, data, event) {
      var message;
      message = data.parse();
      console.log("==");
      console.log("#" + _this.id + ": received ping event from #" + source + ": " + message.count);
      if (message.count > 0) {
        return _this.pong(source, message.count - 1);
      } else {
        return _this.final(source);
      }
    });
    this.on("pong", function(source, data, event) {
      var message;
      message = data.parse();
      console.log("==");
      console.log("#" + _this.id + ": received pong event from #" + source + ": " + message.count);
      if (message.count > 0) {
        return _this.ping(source, message.count - 1);
      } else {
        return _this.final(source);
      }
    });
    this.on("final", function(source, data, event) {
      var message;
      message = data.parse();
      console.log("==");
      return console.log("#" + this.id + ": received final event from #" + source);
    });
  }

  PingPong.prototype.ping = function(target, count) {
    var ping;
    ping = DEventData.createFromMessage(messages.PING, {
      count: count,
      message: "Ping from #" + this.id
    });
    return target.emit("ping", this.id, ping);
  };

  PingPong.prototype.pong = function(target, count) {
    var pong;
    pong = DEventData.createFromMessage(messages.PONG, {
      count: count,
      message: "Pong from #" + this.id
    });
    return target.emit("pong", this.id, pong);
  };

  PingPong.prototype.final = function(target) {
    var final;
    final = DEventData.createFromMessage(messages.FINAL, {
      message: "Final from #" + this.id
    });
    return target.emit("final", this.id, final);
  };

  return PingPong;

})(DEventEmitter);

main = function() {
  var pp1, pp2;
  pp1 = new PingPong();
  pp2 = new PingPong();
  pp1.ping(pp2.id, 10);
  return pp2.ping(pp1.id, 10);
};

main();
