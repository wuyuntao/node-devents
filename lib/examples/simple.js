// Generated by CoffeeScript 1.3.3
var DEventEmitter, PingMessage, WORKERS, cluster, devent, main, startMaster, startWorker;

cluster = require("cluster");

DEventEmitter = (devent = require("../devent")).DEventEmitter;

WORKERS = 2;

PingMessage = (function() {

  function PingMessage() {}

  constructor(PingMessage.count, PingMessage.message);

  PingMessage.prototype.toString = function() {
    return "PingMessage[@count=" + this.count + ", @message=" + this.message + "]";
  };

  return PingMessage;

})();

startMaster = function() {
  var i, _i;
  for (i = _i = 1; 1 <= WORKERS ? _i <= WORKERS : _i >= WORKERS; i = 1 <= WORKERS ? ++_i : --_i) {
    cluster.fork();
  }
  return console.log("Start " + WORKERS + " worker processes");
};

startWorker = function() {
  var emitter, options;
  console.log("Start worker #" + cluster.worker.id);
  options = {
    ID: cluster.worker.id
  };
  devent.initialize(options);
  emitter = new DEventEmitter();
  emitter.on("ping", function(source, message) {
    var response;
    console.log("Emitter " + emitter.id + " received event from " + source.id + ": " + (message.toString()));
    if (message.count > 0) {
      response = new PingMessage(message.count - 1, "Ping from " + emitter.name);
      return emitter.emit(source.id, "ping", response);
    } else {
      return console.log("Emitter " + emitter.id + " received final message");
    }
  });
  return emitter.register("simple_emitter_" + cluster.worker.id, function(error) {
    var i, message, _i;
    for (i = _i = 1; 1 <= WORKERS ? _i <= WORKERS : _i >= WORKERS; i = 1 <= WORKERS ? ++_i : --_i) {
      if (i !== cluster.worker.id) {
        message = new PingMessage(10, "Ping from " + emitter.name);
        emitter.emit("simple_emitter_" + i, "ping", message);
      }
    }
  });
};

main = function() {
  if (cluster.isMaster) {
    return startMaster();
  } else {
    return startWorker();
  }
};

main();
