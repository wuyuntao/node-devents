// Generated by CoffeeScript 1.3.3
var DEventData, DEventEmitter, WORKERS, cluster, devent, main, messages, startMaster, startWorker, _ref;

cluster = require("cluster");

_ref = devent = require("../devent"), DEventEmitter = _ref.DEventEmitter, DEventData = _ref.DEventData;

messages = require("./messages");

WORKERS = 2;

startMaster = function() {
  var i, _i;
  for (i = _i = 1; 1 <= WORKERS ? _i <= WORKERS : _i >= WORKERS; i = 1 <= WORKERS ? ++_i : --_i) {
    cluster.fork();
  }
  return console.log("Start " + WORKERS + " worker processes");
};

startWorker = function() {
  var emitter, i, options, _i, _results;
  console.log("Start worker #" + cluster.worker.id);
  options = {
    ID: cluster.worker.id
  };
  devent.config(options);
  emitter = new DEventEmitter();
  emitter.on("ping", function(source, data, event) {
    var message, response;
    message = data.parse();
    console.log("Emitter " + emitter.id + " received event from " + source.id + ":");
    console.log("Message " + data.id + ": count: " + message.count + " message: " + message.message);
    if (message.count > 0) {
      response = DEventData.createFromMessage(messages.PING, {
        count: message.count - 1,
        message: "Ping from " + emitter.name
      });
      return source.emit("ping", emitter.id, response);
    } else {
      return console.log("Emitter " + emitter.id + " received final message");
    }
  });
  emitter.register("simple_emitter_" + cluster.worker.id);
  _results = [];
  for (i = _i = 1; 1 <= WORKERS ? _i <= WORKERS : _i >= WORKERS; i = 1 <= WORKERS ? ++_i : --_i) {
    if (i !== cluster.worker.id) {
      _results.push(emitter.resolve("simple_emitter_" + i, function(error, source) {
        var response;
        response = DEventData.createFromMessage(message.PING, {
          count: 10,
          message: "Ping from " + emitter.name
        });
        return source.emit("ping", emitter.id, response);
      }));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

main = function() {
  if (cluster.isMaster) {
    return startMaster();
  } else {
    return startWorker();
  }
};

main();
