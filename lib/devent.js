// Generated by CoffeeScript 1.3.3
var DEvent, DEventData, DEventEmitter, DEventEmitterId, DEventEmitterManager, Event, EventData, EventEmitter, cluster, settings, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cluster = require("cluster");

EventEmitter = require("events").EventEmitter;

_ref = require("./messages"), Event = _ref.Event, EventData = _ref.EventData;

settings = require("./settings");

DEventEmitterId = (function() {

  DEventEmitterId._nextId = 1;

  function DEventEmitterId(data) {
    if (data == null) {
      data = settings.ID << 24 | DEventEmitterId._nextId++;
    }
    this.data = data;
  }

  DEventEmitterId.prototype.toNumber = function() {
    return this.data;
  };

  DEventEmitterId.prototype.isLocal = function() {
    return this.data >> 24 === settings.ID;
  };

  DEventEmitterId.prototype.emit = function(event, source, message) {
    return DEventEmitterManager.instance.emit("newEvent", new DEvent(source, this, event, message));
  };

  DEventEmitterId.prototype.toString = function() {
    return "[" + this.constructor.name + " " + this.data + "]";
  };

  return DEventEmitterId;

})();

DEventEmitterManager = (function(_super) {

  __extends(DEventEmitterManager, _super);

  function DEventEmitterManager() {
    var _this = this;
    DEventEmitterManager.__super__.constructor.apply(this, arguments);
    this._emitters = {};
    this._namedEmitters = {};
    this.on("newEmitter", function(emitter) {
      var id;
      id = emitter.id.toNumber();
      if (id in _this._emitters) {
        return emitter.__emit("error", new Error("Id is not already exists"));
      }
      return _this._emitters[id] = emitter;
    });
    this.on("removeEmitter", function(emitter) {
      var id;
      id = emitter.id.toNumber();
      if (!(id in _this._emitters)) {
        return emitter.__emit("error", new Error("Id not found"));
      }
      return _this._emitters[id] = emitter;
    });
    this.on("registerName", function(emitter) {
      if (!emitter.name) {
        return emitter.__emit("error", new Error("Invalid name"));
      }
      if (emitter.name in _this._namedEmitters) {
        return emitter.__emit("error", new Error("Duplicate name"));
      }
      return _this._emitters[emitter.name] = emitter;
    });
    this.on("unregisterName", function(emitter) {
      if (!emitter.name) {
        return emitter.__emit("error", new Error("Invalid name"));
      }
      if (!(emitter.name in _this._namedEmitters)) {
        return emitter.__emit("error", new Error("Name not found"));
      }
      return del(_this._emitters[emitter.name]);
    });
    this.on("newEvent", function(event) {
      var emitter, target;
      target = event.target.toNumber();
      emitter = _this._emitters[target];
      if (emitter == null) {
        if (event.source.isLocal()) {
          event.source.__emit("error", new Error("Target is dead"));
        } else {
          console.log("Sending event to remote emitter is not implemented");
        }
        return;
      }
      return emitter.__emit(event.type, event.source, event.data, event);
    });
  }

  return DEventEmitterManager;

})(EventEmitter);

DEventEmitterManager.instance = new DEventEmitterManager();

DEventEmitter = (function(_super) {

  __extends(DEventEmitter, _super);

  function DEventEmitter() {
    DEventEmitter.__super__.constructor.apply(this, arguments);
    this.id = new DEventEmitterId();
    this.isDestroyed = false;
    DEventEmitterManager.instance.emit("newEmitter", this);
  }

  DEventEmitter.prototype.__emit = DEventEmitter.prototype.emit;

  DEventEmitter.prototype.emit = function(event, source, message) {
    return this.id.emit(event, source, message);
  };

  DEventEmitter.prototype.register = function(name) {
    if (this.name) {
      throw new Error("Name is already registered");
    }
    return DEventEmitterManager.instance.emit("registerName", this);
  };

  DEventEmitter.prototype.unregister = function() {
    if (!this.name) {
      throw new Error("Name is not defined");
    }
    return DEventEmitterManager.instance.emit("unregisterName", this);
  };

  DEventEmitter.prototype.destroy = function() {
    if (this.isDestroyed) {
      return;
    }
    this.isDestroyed = true;
    return DEventEmitterManager.instance.emit("removeEmitter", this);
  };

  DEventEmitter.prototype.toString = function() {
    return "[" + this.constructor.name + " " + (id.toNumber()) + "]";
  };

  return DEventEmitter;

})(EventEmitter);

DEvent = (function() {

  DEvent.deserialize = function(buffer) {
    var data, event, source, target, type;
    event = Event.parse(buffer);
    source = DEventEmitterId.parse(event.source);
    target = DEventEmitterId.parse(event.target);
    type = event.type.name;
    data = new DEventData(event.data);
    return new DEvent(source, target, type, data);
  };

  function DEvent(source, target, type, data) {
    this.source = source;
    this.target = target;
    this.type = type;
    this.data = data;
  }

  return DEvent;

})();

DEventData = (function() {

  DEventData._parsers = {};

  DEventData.register = function(id, parser) {
    if (id in this._parsers) {
      throw new Error("ID conflict");
    }
    this._parsers[id] = parser;
  };

  DEventData.parser = function(id) {
    var parser;
    parser = this._parsers[data.id];
    if (parser == null) {
      throw new Error("Parser not found. id: " + data.id);
    }
    return parser;
  };

  DEventData.createFromData = function(id, raw) {
    return new DEventData({
      id: id,
      raw: raw
    });
  };

  DEventData.createFromMessage = function(id, message) {
    return new DEventData({
      id: id,
      message: message
    });
  };

  function DEventData(data) {
    if (data == null) {
      data = {};
    }
    this.id = data.id;
    this.raw = data.raw;
    this.message = data.message;
  }

  DEventData.prototype.parse = function() {
    if (this.message != null) {
      return this.message;
    }
    return this.message = DEventData.parser(this.id).parse(this);
  };

  DEventData.prototype.serialize = function() {
    if (this.raw != null) {
      return this.raw;
    }
    return this.raw = DEventData.parser(this.id).serialize(this);
  };

  return DEventData;

})();

exports.version = "0.0.1";

exports.DEventEmitter = DEventEmitter;

exports.DEventData = DEventData;

exports.config = settings.config;
